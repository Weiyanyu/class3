<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="top.yeonon.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="top.yeonon.pojo.User" >
    <constructor >
      <idArg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="student_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="email" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="avatar" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="question" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="answer" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="role" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="banned" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="profile" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, student_id, user_name, password, email, avatar, question, answer, role, 
    create_time, update_time, banned, profile
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="top.yeonon.pojo.User" >
    insert into user (user_id, student_id, user_name, 
      password, email, avatar, 
      question, answer, role, 
      create_time, update_time, banned,profile
      )
    values (#{userId,jdbcType=INTEGER}, #{studentId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, 
      #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, 
      now(), now(), #{banned,jdbcType=TINYINT}, #{profile,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="top.yeonon.pojo.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="avatar != null" >
        avatar,
      </if>
      <if test="question != null" >
        question,
      </if>
      <if test="answer != null" >
        answer,
      </if>
      <if test="role != null" >
        role,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="banned != null" >
        banned,
      </if>
      <if test="profile != null">
        profile,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null" >
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="question != null" >
        #{question,jdbcType=VARCHAR},
      </if>
      <if test="answer != null" >
        #{answer,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        now(),
      </if>
      <if test="updateTime != null" >
        now(),
      </if>
      <if test="banned != null" >
        #{banned,jdbcType=TINYINT},
      </if>
      <if test="profile != null">
        #{profile,jdbcType=VARCHAR}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="top.yeonon.pojo.User" >
    update user
    <set >
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null" >
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="question != null" >
        question = #{question,jdbcType=VARCHAR},
      </if>
      <if test="answer != null" >
        answer = #{answer,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = now(),
      </if>
      <if test="banned != null" >
        banned = #{banned,jdbcType=TINYINT},
      </if>
      <if test="profile != null">
        profile = #{profile, jdbcType=VARCHAR}
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.yeonon.pojo.User" >
    update user
    set student_id = #{studentId,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      question = #{question,jdbcType=VARCHAR},
      answer = #{answer,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = now(),
      banned = #{banned,jdbcType=TINYINT}
      profile = #{profile, jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="checkStudentId" resultType="int" parameterType="string" >
    SELECT count(1)
    <include refid="Base_Column_List"/>
    FROM user
    WHERE student_id = #{studentId}
  </select>

  <select id="checkEmail" resultType="int" parameterType="string" >
    SELECT count(1)
    <include refid="Base_Column_List" />
    FROM user
    WHERE email=#{email}
  </select>

  <select id="login" resultMap="BaseResultMap" parameterType="map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM user
    WHERE student_id = #{studentId}
    AND password = #{password}
  </select>

  <select id="selectQuestionByStudentId" resultType="string" parameterType="map">
    SELECT
    question
    FROM user
    WHERE student_id = #{studentId}
  </select>

    <select id="checkAnswer" resultType="int" parameterType="map" >
    SELECT count(1)
    FROM user
    WHERE student_id = #{studentId}
    AND question=#{question}
    AND answer=#{answer}
  </select>

  <select id="selectUserByStudentId" parameterType="string" resultMap="BaseResultMap" >
    SELECT
    <include refid="Base_Column_List" />
    FROM user
    WHERE student_id = #{studentId}
  </select>

  <update id="updatePasswordByStudentId" parameterType="map">
    UPDATE user
    SET password=#{newPassword}
    WHERE student_id=#{studentId}
  </update>

  <select id="checkPassword" parameterType="map" resultType="int">
    SELECT count(1)
    FROM user
    WHERE user_id=#{userId}
    AND password=#{oldPassword}
  </select>

  <select id="selectEmailByStudentId" parameterType="string" resultType="string" >
    SELECT
    email
    FROM user
    WHERE student_id = #{studentId}
  </select>

  <update id="updatePasswordByUserId" parameterType="map" >
    UPDATE user
    SET password=#{newPassword}
    WHERE user_id=#{userId}
  </update>
</mapper>